/*
 * Aurora: https://github.com/pixelmatix/aurora
 * Copyright (c) 2014 Jason Coon
 *
 * Munch pattern created by J.B. Langston: https://github.com/jblang/aurora/blob/master/PatternMunch.h
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef PatternCGSH_H
#define PatternCGSH_H

#include "time.h"

class PatternCGSH : public Drawable {
private:
    byte count = 0;
    byte dir = 1;
    byte flip = 0;
    byte generation = 0;
    byte g=0;
    byte nums[420]={
      0x3F,0xE0,0x7F,0xF0,0xFF,0xF8,0xF0,0x78,0xE8,0x38,0xE4,0x38,0xE2,0x38,0xE2,0x38,0xE2,0x38,0xE2,0x38,0xE2,0x38,0xE2,0x38,0xE2,0x38,0xE2,0x38,0xE2,0x38,0xE1,0x38,0xE0,0xB8,0xF0,0x78,0xFF,0xF8,0x7F,0xF0,0x3F,0xE0,
      0x03,0x00,0x07,0x00,0x0F,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,
      0x3F,0xE0,0x7F,0xF0,0xFF,0xF8,0x00,0x78,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x78,0x1F,0xF0,0x3F,0xE0,0x7F,0xC0,0xF0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xF0,0x00,0xFF,0xF8,0x7F,0xF0,0x3F,0xE0,
      0x3F,0xE0,0x7F,0xF0,0xFF,0xF8,0x00,0x78,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x78,0x7F,0xF0,0x3F,0xE0,0x7F,0xF0,0x00,0x78,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x78,0xFF,0xF8,0x7F,0xF0,0x3F,0xE0,
      0x20,0x08,0x60,0x18,0xE0,0x38,0xE0,0x38,0xE0,0x38,0xE0,0x38,0xE0,0x38,0xE0,0x38,0xF0,0x38,0xFF,0xF8,0x7F,0xF8,0x3F,0xF8,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,
      0x3F,0xE0,0x7F,0xF0,0xFF,0xF8,0xF0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xF0,0x00,0x7F,0xC0,0x3F,0xE0,0x1F,0xF0,0x00,0x78,0x00,0x38,0x00,0x38,0x00,0x38,0xE0,0x38,0xE0,0x78,0xFF,0xF8,0x7F,0xF0,0x3F,0xE0,
      0x3F,0xE0,0x7F,0xF0,0xFF,0xF8,0x00,0x78,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x1F,0xF8,0x3F,0xF8,0x7F,0xF8,0xF0,0x78,0xE0,0x38,0xE0,0x38,0xE0,0x38,0xE0,0x38,0xF0,0x78,0xFF,0xF8,0x7F,0xF0,0x3F,0xE0,
      0x3F,0xE0,0x7F,0xF0,0xFF,0xF8,0x00,0x78,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,
      0x3F,0xE0,0x7F,0xF0,0xFF,0xF8,0xF0,0x78,0xE0,0x38,0xE0,0x38,0xE0,0x38,0xE0,0x38,0xF0,0x78,0x7F,0xF0,0x3F,0xE0,0x7F,0xF0,0xF0,0x78,0xE0,0x38,0xE0,0x38,0xE0,0x38,0xE0,0x38,0xF0,0x78,0xFF,0xF8,0x7F,0xF0,0x3F,0xE0,
      0x3F,0xE0,0x7F,0xF0,0xFF,0xF8,0xF0,0x78,0xE0,0x38,0xE0,0x38,0xE0,0x38,0xE0,0x38,0xF0,0x78,0x7F,0xF0,0x3F,0xE0,0x1F,0xF0,0x00,0x78,0x00,0x38,0x00,0x38,0x20,0x38,0x60,0x38,0xF0,0x78,0xFF,0xF8,0x7F,0xF0,0x3F,0xE0,    
    };

    byte small[9*13]={
      0x7C,0xFE,0xEE,0xC6,0xC6,0xC6,0xEE,0xFE,0x7C,
      0x08,0x18,0x38,0x18,0x18,0x18,0x18,0x18,0x18,
      0x7C,0xFE,0x06,0x3E,0x7C,0xE0,0xC0,0xFE,0x7C,
      0x7C,0xFE,0x06,0x7E,0x7C,0x06,0x06,0xFE,0x7C,
      0x42,0xC6,0xC6,0xFE,0x7E,0x06,0x06,0x06,0x06,
      0x7C,0xFE,0xC0,0xF8,0x7C,0x0E,0x06,0xFE,0x7C,
      0x7C,0xFE,0xC0,0xC0,0xFC,0xFE,0xC6,0xFE,0x7C,
      0x7C,0xFE,0xC6,0x06,0x0E,0x1C,0x38,0x30,0x30,
      0x7C,0xFE,0xC6,0xFE,0x7C,0xC6,0xC6,0xFE,0x7C,
      0x7C,0xFE,0xC6,0xFE,0x7C,0x06,0x06,0xFE,0x7C,
      0xF8,0xFC,0xCE,0xC6,0xC6,0xC6,0xCE,0xFC,0xF8,
      0x46,0xC6,0xC6,0xFE,0xFE,0xC6,0xC6,0xC6,0xC6,
      0xC6,0xEE,0xD6,0xD6,0xD6,0xD6,0xD6,0xD6,0xD6
    };

    byte c5x7[21]={
      0x1E,0x1F,0x1B,0x1B,0x1B,0x1F,0x1E,
      0x1B,0x1B,0x1F,0x1F,0x1B,0x1B,0x1B,
      0x11,0x1B,0x1F,0x15,0x15,0x15,0x15,
    };
    
    byte bit[8]={128,64,32,16,8,4,2,1};
    struct tm timeinfo;
    
public:
    PatternCGSH() {
        name = (char *)"CGSH";
    }

    void draw_digit(int x, int y, int digit, CRGB color) {
      
      for (int i=0; i<21; i++) {
        for(int j=0; j<8; j++) {
          if (nums[i*2+digit*42] & bit[j]) effects.leds[XY(j+x, i+y)]=color;
          else effects.leds[XY(j+x, i+y)]=CRGB(0,0,0);
          
        }
        for(int j=0; j<5; j++) {
          if (nums[i*2+1+digit*42] & bit[j]) effects.leds[XY(j+x+8, i+y)]=color;
          else effects.leds[XY(j+x+8, i+y)]=CRGB(0,0,0);
        }
      }
    }

    void draw_small(int x, int y, int digit, CRGB color) {
      
      for (int i=0; i<9; i++) {
        for(int j=0; j<7; j++) {
          if (small[i+digit*9] & bit[j]) effects.leds[XY(j+x, i+y)]=color;
          else effects.leds[XY(j+x, i+y)]=CRGB(0,0,0);
        }
      }
    }

    void draw_5x7(int x, int y, int digit, CRGB color) {
      for (int i=0; i<7; i++) {
        for(int j=3; j<8; j++) {
          if (c5x7[i+digit*7] & bit[j]) effects.leds[XY(j+x-3, i+y)]=color;
          else effects.leds[XY(j+x, i+y)]=CRGB(0,0,0);
        }
      }
    }

    void draw_colon(CRGB color) {
        effects.leds[XY(31,7)]=effects.leds[XY(32,7)]=color;
        effects.leds[XY(31,8)]=effects.leds[XY(32,8)]=color;
        effects.leds[XY(31,15)]=effects.leds[XY(32,15)]=color;
        effects.leds[XY(31,16)]=effects.leds[XY(32,16)]=color;
    }

    unsigned int drawFrame() {
        //CRGB color; 
        /*
        for (byte x = 0; x < MATRIX_WIDTH; x++) {
            for (byte y = 0; y < MATRIX_HEIGHT; y++) {
                effects.leds[XY(x, y)] = CRGB(x*4, g, y*4); // effects.ColorFromCurrentPalette(x*32+y); //effects.ColorFromCurrentPalette(x, 128);
            }
        }
        
        if (g>0) g=0;
        else g=255;
        */

        effects.ClearFrame();
        
        timeClient.update();
        //getLocalTime(&timeinfo);

        int h = timeClient.getHours();
        int m = timeClient.getMinutes();
        
        if (h/10!=0) draw_digit(1,1,h/10, CRGB(55,55,0));
        draw_digit(16,1,h%10, CRGB(55,55,0));
        draw_colon(CRGB(55,55,0));
        draw_digit(35,1,m/10, CRGB(55,55,0));
        draw_digit(50,1,m%10, CRGB(55,55,0));

        draw_small(0,23,7,CRGB(55,0,0));
        draw_small(8,23,8,CRGB(55,0,0));
        draw_5x7(16,25,0,CRGB(0,0,55));

        draw_small(22,23,2,CRGB(55,0,0));
        draw_small(30,23,3,CRGB(55,0,0));
        draw_5x7(38,25,1,CRGB(0,0,55));

        draw_small(44,23,4,CRGB(55,0,0));
        draw_small(52,23,5,CRGB(55,0,0));
        draw_5x7(59,25,2,CRGB(0,0,55));

        
        // show it ffs!
        effects.ShowFrame();
        
        return 500;
    }
};

#endif
